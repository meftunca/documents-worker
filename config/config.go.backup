package config

import (
	"log"
	"os"
	"strconv"
	"time"
)

type Config struct {
	Server   ServerConfig
	Redis    RedisConfig
	Worker   WorkerConfig
	External ExternalConfig
	OCR      OCRConfig
	Cache    CacheConfig
}

type ServerConfig struct {
	Port         string
	ReadTimeout  time.Duration
	WriteTimeout time.Duration
	IdleTimeout  time.Duration
	Environment  string
}

type RedisConfig struct {
	Host     string
	Port     string
	Password string
	DB       int
}

type WorkerConfig struct {
	MaxConcurrency int
	QueueName      string
	RetryCount     int
	RetryDelay     time.Duration
}

type ExternalConfig struct {
	VipsEnabled     bool
	FFmpegPath      string
	LibreOfficePath string
	MutoolPath      string
	TesseractPath   string
	PyMuPDFScript   string
}

type OCRConfig struct {
	Language string
	DPI      int
	PSM      int
}

type CacheConfig struct {
	Enabled   bool
	Directory string
	TTL       time.Duration
	MaxSize   int64 // MB
}

func Load() *Config {
	return &Config{
		Server: ServerConfig{
			Port:         getEnv("SERVER_PORT", "3001"),
			ReadTimeout:  getDurationEnv("SERVER_READ_TIMEOUT", 30*time.Second),
			WriteTimeout: getDurationEnv("SERVER_WRITE_TIMEOUT", 30*time.Second),
			IdleTimeout:  getDurationEnv("SERVER_IDLE_TIMEOUT", 120*time.Second),
			Environment:  getEnv("ENVIRONMENT", "development"),
		},
		Redis: RedisConfig{
			Host:     getEnv("REDIS_HOST", "localhost"),
			Port:     getEnv("REDIS_PORT", "6379"),
			Password: getEnv("REDIS_PASSWORD", ""),
			DB:       getIntEnv("REDIS_DB", 0),
		},
		Worker: WorkerConfig{
			MaxConcurrency: getIntEnv("WORKER_MAX_CONCURRENCY", 10),
			QueueName:      getEnv("WORKER_QUEUE_NAME", "documents_queue"),
			RetryCount:     getIntEnv("WORKER_RETRY_COUNT", 3),
			RetryDelay:     getDurationEnv("WORKER_RETRY_DELAY", 5*time.Second),
		},
		External: ExternalConfig{
			VipsEnabled:     getBoolEnv("VIPS_ENABLED", true),
			FFmpegPath:      getEnv("FFMPEG_PATH", "ffmpeg"),
			LibreOfficePath: getEnv("LIBREOFFICE_PATH", "soffice"),
			MutoolPath:      getEnv("MUTOOL_PATH", "mutool"),
			TesseractPath:   getEnv("TESSERACT_PATH", "tesseract"),
			PyMuPDFScript:   getEnv("PYMUPDF_SCRIPT", "./scripts"),
		},
		OCR: OCRConfig{
			Language: getEnv("OCR_LANGUAGE", "tur+eng"),
			DPI:      getIntEnv("OCR_DPI", 300),
			PSM:      getIntEnv("OCR_PSM", 1),
		},
		Cache: CacheConfig{
			Enabled:   getBoolEnv("CACHE_ENABLED", true),
			Directory: getEnv("CACHE_DIRECTORY", "./cache"),
			TTL:       getDurationEnv("CACHE_TTL", 24*time.Hour),
			MaxSize:   getInt64Env("CACHE_MAX_SIZE_MB", 1024), // 1GB default
		},
	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func getIntEnv(key string, defaultValue int) int {
	if value := os.Getenv(key); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
		log.Printf("Warning: Invalid integer value for %s: %s, using default: %d", key, value, defaultValue)
	}
	return defaultValue
}

func getBoolEnv(key string, defaultValue bool) bool {
	if value := os.Getenv(key); value != "" {
		if boolValue, err := strconv.ParseBool(value); err == nil {
			return boolValue
		}
		log.Printf("Warning: Invalid boolean value for %s: %s, using default: %t", key, value, defaultValue)
	}
	return defaultValue
}

func getDurationEnv(key string, defaultValue time.Duration) time.Duration {
	if value := os.Getenv(key); value != "" {
		if duration, err := time.ParseDuration(value); err == nil {
			return duration
		}
		log.Printf("Warning: Invalid duration value for %s: %s, using default: %s", key, value, defaultValue)
	}
	return defaultValue
}

func getInt64Env(key string, defaultValue int64) int64 {
	if value := os.Getenv(key); value != "" {
		if int64Value, err := strconv.ParseInt(value, 10, 64); err == nil {
			return int64Value
		}
		log.Printf("Warning: Invalid int64 value for %s: %s, using default: %d", key, value, defaultValue)
	}
	return defaultValue
}
}
		}
		log.Printf("Warning: Invalid duration value for %s: %s, using default: %v", key, value, defaultValue)
	}
	return defaultValue
}
